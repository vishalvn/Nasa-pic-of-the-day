// Generated by Dagger (https://dagger.dev).
package com.vv.nasapod.di.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_OkHttpClientFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<HttpLoggingInterceptor> interceptorProvider;

  public NetworkModule_OkHttpClientFactory(NetworkModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    this.module = module;
    this.interceptorProvider = interceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return okHttpClient(module, interceptorProvider.get());
  }

  public static NetworkModule_OkHttpClientFactory create(NetworkModule module,
      Provider<HttpLoggingInterceptor> interceptorProvider) {
    return new NetworkModule_OkHttpClientFactory(module, interceptorProvider);
  }

  public static OkHttpClient okHttpClient(NetworkModule instance,
      HttpLoggingInterceptor interceptor) {
    return Preconditions.checkNotNull(instance.okHttpClient(interceptor), "Cannot return null from a non-@Nullable @Provides method");
  }
}
